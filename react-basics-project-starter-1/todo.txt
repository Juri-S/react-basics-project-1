Download the starter files here on our GitHub repo(opens in a new tab).

Inspect the data object in utils/data.js to get an idea of what data you will work with.

The data object is a converted JSON string that was retrieved from a recipe API 
called Edamam(opens in a new tab). It contains 20 recipes in the ‘hit’ key that you can use for the app.

To access data, such as recipe labels, you need to look into the recipe key, 
e.g. data.hits[0].recipe.label has the following value "Paleo Chocolate Covered Caramels". 
Use console.log() in RecipeListPage.jsx to play around with the data and see what you can retrieve.

In App.jsx, you want to keep track of 
a selected recipe item in a state and 
show a <RecipePage /> component 
(you can use a placeholder for now, 
or create a new component) if the user has selected one.
 Else show the <RecipeListPage /> 
 that will contain an overview of all recipes.

In RecipeListPage.jsx, 
you can use the imported recipe 
data and display a list of all recipes.
 Show the following details for each recipe:

Recipe name

A picture of the recipe/meal

Diet label (if present)

Cautions (if present)

Meal type

Dish type

Each item shows the following health labels (if present):

Vegan

Vegetarian

NOTE: As the API does not provide ID’s for the recipes, you can use names/labels as keys in the list items.

Built a search function that filters based on the name and/or health labels (vegan/vegetarian/pescetarian/gluten-free/sesame-free/etc.).

Create the <RecipePage /> component and make it display more detailed information about a selected recipe:

Recipe name

A picture of the recipe/meal

Meal type

Dish type

Total cooking time

Diet label

All health labels

Cautions

Ingredients

Servings

Total nutrients (Energy in kcal, protein, fat, carbs, cholesterol, sodium)

The items in the list (<RecipeListPage />) should be clickable and, once selected show a more detailed <RecipePage /> component. The user can also click on a back button in <RecipePage /> to return to the recipes overview.

Style and make your app responsive using ChakraUI, which is already installed.

Check the requirements below to make sure you have implemented everything.

img
Nina

08:03

Tips

bullet
Don’t forget to take regular breaks

bullet
You can use code examples from previous exercises

bullet
Use console.log() to see how your props look like in case your data props doesn't display on screen

bullet
You don't want to use random UUID's or 
index numbers when creating a list of components. If you want to use UUID's, you can add them to the data file.



You have almost passed the assignment.
I'd like the project to be a bit more modular with more separate components.
 +For example on the RecipeListPage, you can import the search-bar and the recipe card as a separate component.
+The same can be applied to the nutrient items and ingredient list.

+On the recipe detail page, the ingredients and the preparation method is missing.

As an extra addition you can implement the following changes:

+Show text if no recipes are found
+Add more spacing between the recipe attributes (dairy-free, peanut-free) on the detail page
+Instead of calling the 'handleSelectedRecipe' function, you can also modify the selectedRecipe directly.


Uploading node_modules to GitHub is not necessary indeed. These are internal files that node will download and install from the internet when running the 'npm install' command.
"
ingredientsLines